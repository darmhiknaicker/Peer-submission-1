[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Statistical Computing",
    "section": "",
    "text": "Welcome to Statistical Computing\nThis is the homepage of the book."
  },
  {
    "objectID": "Stats proj 1.html",
    "href": "Stats proj 1.html",
    "title": "Stats project 1",
    "section": "",
    "text": "print(airquality)"
  },
  {
    "objectID": "Stats proj 1.html#summary-statistics-for-temp",
    "href": "Stats proj 1.html#summary-statistics-for-temp",
    "title": "Stats project 1",
    "section": "Summary statistics for Temp",
    "text": "Summary statistics for Temp\n\nmean(airquality$Temp, na.rm = TRUE)\n\n[1] 77.88235\n\nsd(airquality$Temp, na.rm = TRUE)\n\n[1] 9.46527\n\nmin(airquality$Temp, na.rm = TRUE)\n\n[1] 56\n\nmax(airquality$Temp, na.rm = TRUE)\n\n[1] 97"
  },
  {
    "objectID": "Stats proj 1.html#summary-statistics-for-ozone",
    "href": "Stats proj 1.html#summary-statistics-for-ozone",
    "title": "Stats project 1",
    "section": "Summary statistics for Ozone",
    "text": "Summary statistics for Ozone\n\nmean(airquality$Ozone, na.rm = TRUE)\n\n[1] 42.12931\n\nsd(airquality$Ozone, na.rm = TRUE)\n\n[1] 32.98788\n\nmin(airquality$Ozone, na.rm = TRUE)\n\n[1] 1\n\nmax(airquality$Ozone, na.rm = TRUE)\n\n[1] 168"
  },
  {
    "objectID": "Stats proj 1.html#matrix-calculations-for-beta-estimates",
    "href": "Stats proj 1.html#matrix-calculations-for-beta-estimates",
    "title": "Stats project 1",
    "section": "Matrix calculations for beta estimates",
    "text": "Matrix calculations for beta estimates\n\nY &lt;- cars$dist\nX &lt;- cbind(1, cars$speed)"
  },
  {
    "objectID": "Stats proj 1.html#compute-beta-estimates-using-matrix-calculations",
    "href": "Stats proj 1.html#compute-beta-estimates-using-matrix-calculations",
    "title": "Stats project 1",
    "section": "Compute beta estimates using matrix calculations",
    "text": "Compute beta estimates using matrix calculations\n\nbeta_hat &lt;- solve(t(X) %*% X) %*% t(X) %*% Y\nprint(beta_hat)\n\n           [,1]\n[1,] -17.579095\n[2,]   3.932409"
  },
  {
    "objectID": "Stats proj 1.html#linear-model-for-distance-vs-speed",
    "href": "Stats proj 1.html#linear-model-for-distance-vs-speed",
    "title": "Stats project 1",
    "section": "Linear model for distance vs speed",
    "text": "Linear model for distance vs speed\n\nmodel &lt;- lm(dist ~ speed, data = cars)\nsummary(model)\n\n\nCall:\nlm(formula = dist ~ speed, data = cars)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-29.069  -9.525  -2.272   9.215  43.201 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -17.5791     6.7584  -2.601   0.0123 *  \nspeed         3.9324     0.4155   9.464 1.49e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 15.38 on 48 degrees of freedom\nMultiple R-squared:  0.6511,    Adjusted R-squared:  0.6438 \nF-statistic: 89.57 on 1 and 48 DF,  p-value: 1.49e-12"
  },
  {
    "objectID": "Prac 2.html",
    "href": "Prac 2.html",
    "title": "Prac day 4",
    "section": "",
    "text": "── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nQuestion 1\nGenerating the simulated data.\n\nset.seed(1)\nx &lt;- seq(1, 100, by = 1)\nn &lt;- length(x)\ne &lt;- rnorm(100, mean = 0, sd = 0.2)\n\ny &lt;- sin(x/10) + e\n\n\n\nQuestion 2\nImplementing the lowess algorithm and defining a custom algorithm that returns the smoothed values.\n\ncustomLowess &lt;- function(x, y, f){\n  \n  #span calculation\n  n &lt;- length(x)\n  k &lt;- ceiling(f*n)\n  y_smooth &lt;- numeric(n)\n  \n  for (i in 1:n){\n    \n    #find distances, select k nearest neighbour\n    dists &lt;- abs(x - x[i])\n    sorted_indices &lt;- order(dists)\n    neighbors &lt;- sorted_indices[1:k]\n    dmax &lt;- max(dists[neighbors])\n    \n    # Compute weights using the tricube kernel\n    weights &lt;- (1 - (dists[neighbors] / dmax)^3)^3\n    weights[dists[neighbors] &gt;= dmax] &lt;- 0\n    \n    # Perform weighted linear regression\n    X &lt;- cbind(1, x[neighbors])\n    W &lt;- diag(weights)\n    beta &lt;- solve(t(X) %*% W %*% X) %*% t(X) %*% W %*% y[neighbors]\n    \n    # Predict smoothed value\n    y_smooth[i] &lt;- beta[1] + beta[2] * x[i]\n    \n  }\n  \n  return(y_smooth)\n}\n  \n\n# Apply custom LOWESS\nf &lt;- 0.2\ny_custom_lowess &lt;- customLowess(x, y, f)\n\n\n\nQuestion 3\nApplying R’s built-in lowess\n\n# Apply R's built-in LOWESS\nlowess_result &lt;- lowess(x, y, f = f, iter = 0)\n\nConvert to data frames for plotting\n\noriginal_data &lt;- data.frame(x, y)\ncustom_lowess_data &lt;- data.frame(x, y_smooth = y_custom_lowess)\nbuilt_in_lowess_data &lt;- data.frame(x = lowess_result$x, y_smooth = lowess_result$y)\n\nPlot comparison\n\nggplot() +\n  geom_point(data = original_data, aes(x, y), alpha = 0.5, color = \"black\") +\n  geom_line(data = custom_lowess_data, aes(x, y_smooth), color = \"blue\", size = 1, linetype = \"dashed\", alpha = 0.8) +\n  geom_line(data = built_in_lowess_data, aes(x, y_smooth), color = \"red\", size = 1, alpha = 0.8) +\n  labs(title = \"Comparison of Custom LOWESS and R's Built-in LOWESS\", \n       x = \"X\", y = \"Smoothed Y\", \n       caption = \"Blue Dashed: Custom LOWESS, Red: Built-in LOWESS\") +\n  theme_minimal()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "Prac day 4.html",
    "href": "Prac day 4.html",
    "title": "Prac day 4",
    "section": "",
    "text": "Question 1\n\nhead(flights)\n\n# A tibble: 6 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n1  2013     1     1      517            515         2      830            819\n2  2013     1     1      533            529         4      850            830\n3  2013     1     1      542            540         2      923            850\n4  2013     1     1      544            545        -1     1004           1022\n5  2013     1     1      554            600        -6      812            837\n6  2013     1     1      554            558        -4      740            728\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\ndplyr::glimpse(flights)\n\nRows: 336,776\nColumns: 19\n$ year           &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       &lt;int&gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      &lt;dbl&gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       &lt;int&gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      &lt;dbl&gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        &lt;chr&gt; \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         &lt;int&gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        &lt;chr&gt; \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         &lt;chr&gt; \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           &lt;chr&gt; \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       &lt;dbl&gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       &lt;dbl&gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           &lt;dbl&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         &lt;dbl&gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n\n\n\n\nQuestion 2\n\ndist_tbl &lt;- flights |&gt;\n  filter(month == 1) |&gt;\n  group_by(carrier) |&gt;\n  summarise(\n    mean_distance = mean(distance, na.rm = TRUE),\n    sd_distance = sd(distance, na.rm = TRUE)\n  ) |&gt;\n  arrange(mean_distance)\n\ndist_tbl\n\n# A tibble: 16 × 3\n   carrier mean_distance sd_distance\n   &lt;chr&gt;           &lt;dbl&gt;       &lt;dbl&gt;\n 1 YV               229          0  \n 2 9E               476.       334. \n 3 EV               522.       294. \n 4 US               536.       553. \n 5 MQ               566.       223. \n 6 FL               691.       142. \n 7 OO               733         NA  \n 8 WN               942.       496. \n 9 B6              1062.       681. \n10 DL              1220.       644. \n11 AA              1350.       626. \n12 UA              1462.       778. \n13 F9              1620          0  \n14 AS              2402          0  \n15 VX              2495.        98.2\n16 HA              4983          0  \n\n\n\n\nQuestion 3\nFinding out which carriers have a standard deviation with 0 or NA.\n\n# Show carriers where sd_distance is NA\ndist_tbl |&gt; filter(is.na(sd_distance))\n\n# A tibble: 1 × 3\n  carrier mean_distance sd_distance\n  &lt;chr&gt;           &lt;dbl&gt;       &lt;dbl&gt;\n1 OO                733          NA\n\n# Show carriers where sd_distance is 0\ndist_tbl |&gt; filter(sd_distance == 0)\n\n# A tibble: 4 × 3\n  carrier mean_distance sd_distance\n  &lt;chr&gt;           &lt;dbl&gt;       &lt;dbl&gt;\n1 YV                229           0\n2 F9               1620           0\n3 AS               2402           0\n4 HA               4983           0\n\n\nIf the standard deviation is NA, this happens when a carrier has only one flight in January. The standard deviation requires at least two data points to be computed. if the standard deviation is 0, this happens when all flights for that carrier have the same distance, leading to zero variation.\n\n\nQuestion 4\n\ndep_delay_df &lt;- flights |&gt;\n  group_by(month, carrier) |&gt;\n  summarise(avg_dep_delay = mean(dep_delay, na.rm = TRUE), .groups = \"drop\") |&gt;\n  pivot_wider(names_from = carrier, values_from = avg_dep_delay)  # Reshape to wide format\n\ndep_delay_df\n\n# A tibble: 12 × 17\n   month  `9E`    AA     AS    B6    DL    EV    F9    FL    HA    MQ    OO\n   &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1     1 16.9   6.93  7.35   9.49  3.85 24.2  10     1.97 54.4   6.49 67   \n 2     2 16.5   8.28  0.722 13.8   5.54 21.5  29.8   5.18 17.4   8.09 NA   \n 3     3 13.4   8.70  8.42  14.2   9.93 26.2  16.8  17.3   1.16  7.19 NA   \n 4     4 13.6  11.7  11.3   15.2   8.17 22.8  24.6  13.1  -2.1  13.7  NA   \n 5     5 22.7   9.66  6.77   9.78  9.74 20.2  35.9  19.2  -1.45 13.9  NA   \n 6     6 29.0  14.6  13.1   20.4  18.7  25.5  29.4  38.8   1.47 20.8  61   \n 7     7 31.4  12.1   2.42  24.9  20.6  26.5  31.8  41.2  -1.71 20.7  NA   \n 8     8 17.3   7.17  2.87  15.7   9.85 16.3  22.2  23.4   1.68 10.1  64   \n 9     9  7.75  5.69 -4.52   6.63  5.53  8.24  8.26 16.9  -5.44  5.35 -4.94\n10    10  9.33  3.00  0.677  2.96  3.42 13.4   9.70 13.7  -5.10  4.48 NA   \n11    11  7.56  3.10  3.08   3.52  2.85  9.83 13.5  16.9  -5.44  3.28  0.8 \n12    12 19.8  11.7  18.0   17.0  10.8  27.9  13.1  26.1  -3.14 12.7  NA   \n# ℹ 5 more variables: UA &lt;dbl&gt;, US &lt;dbl&gt;, VX &lt;dbl&gt;, WN &lt;dbl&gt;, YV &lt;dbl&gt;\n\n\n\n\nQuestion 5\n\n# Calculate the proportion of flights that departed late but arrived on or before time\ndelayed_but_on_time &lt;- flights |&gt;\n  summarise(\n    total_flights = n(),\n    count_delayed_but_on_time = sum(dep_delay &gt; 0 & arr_delay &lt;= 0, na.rm = TRUE)\n  ) |&gt;\n  mutate(proportion = count_delayed_but_on_time / total_flights)\n\ndelayed_but_on_time$proportion\n\n[1] 0.1052391\n\n\n\n\nQuestion 6\nIdentifying the routes that more than one airline flies.\n\nmulti_airline_routes &lt;- flights |&gt;\n  group_by(origin, dest) |&gt;\n  summarise(num_airlines = n_distinct(carrier), .groups = \"drop\") |&gt;\n  filter(num_airlines &gt; 1)\n\nmulti_airline_routes\n\n# A tibble: 128 × 3\n   origin dest  num_airlines\n   &lt;chr&gt;  &lt;chr&gt;        &lt;int&gt;\n 1 EWR    ATL              4\n 2 EWR    AUS              2\n 3 EWR    BDL              2\n 4 EWR    BNA              2\n 5 EWR    BOS              3\n 6 EWR    BWI              2\n 7 EWR    CHS              2\n 8 EWR    CLE              2\n 9 EWR    CLT              3\n10 EWR    CVG              2\n# ℹ 118 more rows\n\n\nCalculate the average arrival delay for each airline\n\nroute_delays &lt;- flights |&gt;\n  inner_join(multi_airline_routes, by = c(\"origin\", \"dest\")) |&gt;\n  group_by(origin, dest, carrier) |&gt;\n  summarise(avg_arr_delay = mean(arr_delay, na.rm = TRUE), .groups = \"drop\")\n\nroute_delays\n\n# A tibble: 343 × 4\n   origin dest  carrier avg_arr_delay\n   &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 EWR    ATL   9E              -6.25\n 2 EWR    ATL   DL              10.0 \n 3 EWR    ATL   EV              19.5 \n 4 EWR    ATL   UA              10.5 \n 5 EWR    AUS   UA               4.28\n 6 EWR    AUS   WN             -11.2 \n 7 EWR    BDL   EV               6.78\n 8 EWR    BDL   UA              22.6 \n 9 EWR    BNA   EV              17.7 \n10 EWR    BNA   WN              -2.13\n# ℹ 333 more rows\n\n\nFinding the names of these airlines\n\nroute_delays_with_names &lt;- route_delays |&gt;\n  inner_join(airlines, by = \"carrier\") |&gt;\n  select(origin, dest, name, avg_arr_delay)\n\nroute_delays_with_names\n\n# A tibble: 343 × 4\n   origin dest  name                     avg_arr_delay\n   &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;                            &lt;dbl&gt;\n 1 EWR    ATL   Endeavor Air Inc.                -6.25\n 2 EWR    ATL   Delta Air Lines Inc.             10.0 \n 3 EWR    ATL   ExpressJet Airlines Inc.         19.5 \n 4 EWR    ATL   United Air Lines Inc.            10.5 \n 5 EWR    AUS   United Air Lines Inc.             4.28\n 6 EWR    AUS   Southwest Airlines Co.          -11.2 \n 7 EWR    BDL   ExpressJet Airlines Inc.          6.78\n 8 EWR    BDL   United Air Lines Inc.            22.6 \n 9 EWR    BNA   ExpressJet Airlines Inc.         17.7 \n10 EWR    BNA   Southwest Airlines Co.           -2.13\n# ℹ 333 more rows\n\n\nIdentify the airline with the worst and best average arrival delay for each route\n\nroute_performance &lt;- route_delays |&gt;\n  group_by(origin, dest) |&gt;\n  summarise(\n    worst_airline = carrier[which.max(avg_arr_delay)],\n    worst_delay = max(avg_arr_delay, na.rm = TRUE),\n    best_airline = carrier[which.min(avg_arr_delay)],\n    best_delay = min(avg_arr_delay, na.rm = TRUE),\n    .groups = \"drop\"\n  ) |&gt;\n  inner_join(airlines, by = c(\"worst_airline\" = \"carrier\")) |&gt;\n  rename(worst_airline_name = name) |&gt;\n  inner_join(airlines, by = c(\"best_airline\" = \"carrier\")) |&gt;\n  rename(best_airline_name = name)\n\nroute_performance\n\n# A tibble: 128 × 8\n   origin dest  worst_airline worst_delay best_airline best_delay\n   &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;\n 1 EWR    ATL   EV                  19.5  9E               -6.25 \n 2 EWR    AUS   UA                   4.28 WN              -11.2  \n 3 EWR    BDL   UA                  22.6  EV                6.78 \n 4 EWR    BNA   EV                  17.7  WN               -2.13 \n 5 EWR    BOS   B6                   6.87 EV               -4.01 \n 6 EWR    BWI   EV                  20.1  WN                5.95 \n 7 EWR    CHS   EV                  16.2  UA              -14    \n 8 EWR    CLE   UA                   5.97 EV               -3.71 \n 9 EWR    CLT   EV                  20.5  US                0.920\n10 EWR    CVG   EV                  21.2  9E                1.40 \n# ℹ 118 more rows\n# ℹ 2 more variables: worst_airline_name &lt;chr&gt;, best_airline_name &lt;chr&gt;\n\n\nIdentify the route with the greatest difference between best and worst performing airlines\n\nlargest_difference_route &lt;- route_performance |&gt;\n  mutate(delay_diff = worst_delay - best_delay) |&gt;\n  arrange(desc(delay_diff)) |&gt;\n  slice(1)\n\nlargest_difference_route\n\n# A tibble: 1 × 9\n  origin dest  worst_airline worst_delay best_airline best_delay\n  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;\n1 JFK    ATL   EV                    128 9E                 1.40\n# ℹ 3 more variables: worst_airline_name &lt;chr&gt;, best_airline_name &lt;chr&gt;,\n#   delay_diff &lt;dbl&gt;\n\n\nLet’s examine flight counts and variability in delays for this route\n\nreason_for_difference &lt;- flights |&gt;\n  filter(origin == largest_difference_route$origin, dest == largest_difference_route$dest) |&gt;\n  group_by(carrier) |&gt;\n  summarise(\n    num_flights = n(),\n    mean_arr_delay = mean(arr_delay, na.rm = TRUE),\n    sd_arr_delay = sd(arr_delay, na.rm = TRUE),\n    .groups = \"drop\"\n  ) |&gt;\n  inner_join(airlines, by = \"carrier\") |&gt;\n  arrange(desc(mean_arr_delay))\n\nreason_for_difference\n\n# A tibble: 3 × 5\n  carrier num_flights mean_arr_delay sd_arr_delay name                    \n  &lt;chr&gt;         &lt;int&gt;          &lt;dbl&gt;        &lt;dbl&gt; &lt;chr&gt;                   \n1 EV                1         128            NA   ExpressJet Airlines Inc.\n2 DL             1874           6.34         42.3 Delta Air Lines Inc.    \n3 9E               55           1.40         18.0 Endeavor Air Inc.       \n\n\nThe main reason for this is due to the extreme differences in flight frequency. Airlines with fewer flights may have skewed delayed statistics due to extreme cases.\n\n\nQuestion 7\nIdentifying missing values and typos.\n\n# Function to check for missing values\nmissing_values &lt;- colSums(is.na(dataset1))\n\n# Function to check for typos in categorical variables\nfind_typos &lt;- function(column, valid_values) {\n  unique(column[!(column %in% valid_values)])\n}\n\n# Define valid values for categorical columns\nvalid_genders &lt;- c(\"male\", \"female\")\nvalid_disease_status &lt;- c(\"diseased\", \"healthy\")\nvalid_smoker &lt;- c(\"yes\", \"no\")\nvalid_exercise &lt;- c(\"none\", \"occasional\", \"regular\")\n\n# Check for typos\ngender_typos &lt;- find_typos(dataset1$gender, valid_genders)\ndisease_typos &lt;- find_typos(dataset1$disease_status, valid_disease_status)\nsmoker_typos &lt;- find_typos(dataset1$smoker, valid_smoker)\nexercise_typos &lt;- find_typos(dataset1$exercise, valid_exercise)\n\n# Display results\nlist(\n  missing_values = missing_values,\n  gender_typos = gender_typos,\n  disease_typos = disease_typos,\n  smoker_typos = smoker_typos,\n  exercise_typos = exercise_typos\n)\n\n$missing_values\n            id            age         gender         height         weight \n             0              0              0              2              0 \n    blood_type disease_status    cholesterol        glucose         smoker \n             0              0              0              3              0 \n      exercise         income      education         region marital_status \n             0              0              0              0              0 \n\n$gender_typos\n[1] \"femal\"\n\n$disease_typos\n[1] \"Healthy\"\n\n$smoker_typos\ncharacter(0)\n\n$exercise_typos\ncharacter(0)"
  }
]